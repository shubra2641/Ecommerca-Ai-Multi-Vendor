'use strict';
// Handles product type toggle & variations table (extracted from inline _script.blade.php)
(function(){
  function parseData(){ var t=document.getElementById('product-variations-data'); if(!t) return {existing:[],attributes:[],languages:[]}; try{ return JSON.parse(t.innerHTML.trim()||'{}'); }catch(e){ return {existing:[],attributes:[],languages:[]}; } }
  function init(){
  var data=parseData(); var existing=data.existing||[]; var attributes=data.attributes||[]; var langs=data.languages||[]; var usedAttributes=[]; var defaultLang=(langs.find(l=>l.is_default)||langs[0]||{}).code;
    var typeSelect=document.getElementById('type-select'); var simpleBlocks=document.querySelectorAll('.simple-only'); var variableBlock=document.querySelector('.variable-only');
    function syncType(){ if(!typeSelect) return; if(typeSelect.value==='variable'){ simpleBlocks.forEach(b=>b.style.display='none'); if(variableBlock) variableBlock.style.display='block'; } else { simpleBlocks.forEach(b=>b.style.display=''); if(variableBlock) variableBlock.style.display='none'; } }
    if(typeSelect){ typeSelect.addEventListener('change', syncType); syncType(); }
    var variationsTable=document.querySelector('#variations-table tbody'); var addBtn=document.getElementById('add-variation');
    (function seedUsed(){ var checks=Array.from(document.querySelectorAll('.used-attr-checkbox:checked')); if(checks.length){ usedAttributes=checks.map(c=>c.value); } else { var any=document.querySelector('.used-attr-checkbox')!==null; if(!any){ try { var ds=document.getElementById('product-variation-meta')?.dataset.used||'[]'; usedAttributes=JSON.parse(ds); } catch(e){ usedAttributes=[]; } } else usedAttributes=[]; } })();
    function buildAttributeSelectors(attrData, idx){ var html=''; var any= document.querySelector('.used-attr-checkbox')!==null; var list; if(any){ list=usedAttributes.length? attributes.filter(a=>usedAttributes.includes(a.slug)) : []; } else { list= usedAttributes && usedAttributes.length? attributes.filter(a=>usedAttributes.includes(a.slug)) : attributes; } list.forEach(function(a){ var selected=(attrData && attrData[a.slug])? attrData[a.slug]:''; html+='<div class="mb-1"><select class="form-select form-select-sm" name="variations['+idx+'][attributes]['+a.slug+']">'; html+='<option value="">'+a.name+'</option>'; html+=a.values.map(function(v){ return '<option value="'+v.slug+'" '+(selected===v.slug?'selected':'')+'>'+v.value+'</option>'; }).join(''); html+='</select></div>'; }); return html; }
  function buildNameInputs(v, idx){ if(!langs.length) return ''; var trans=v.name_translations||{}; var currentDefault=trans[defaultLang]||v.name||''; var html='<div class="variation-names"><input type="text" class="form-control form-control-sm mb-1" name="variations['+idx+'][name]['+defaultLang+']" placeholder="Name" value="'+(currentDefault||'')+'">'; if(langs.length>1){ html+='<div class="dropdown d-inline-block mb-1">'; html+='<button class="btn btn-xs btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">Langs</button><div class="dropdown-menu p-2" style="min-width:240px">'; langs.filter(l=>l.code!==defaultLang).forEach(function(l){ var val= trans[l.code]||''; html+='<div class="mb-1"><label class="small fw-semibold">'+l.code+'</label><input type="text" class="form-control form-control-sm" name="variations['+idx+'][name]['+l.code+']" value="'+val+'"></div>'; }); html+='</div></div>'; } html+='</div>'; return html; }
  function rowTemplate(v, idx){ return '<tr>\n<td><input type="checkbox" name="variations['+idx+'][active]" '+(v.active?'checked':'')+'></td>\n<td class="w-140 min-w-140">'+buildAttributeSelectors(v.attributes||{}, idx)+buildNameInputs(v,idx)+'</td>\n<td><input name="variations['+idx+'][sku]" value="'+(v.sku||'')+'" class="form-control form-control-sm"></td>\n<td><input type="number" step="0.01" name="variations['+idx+'][price]" value="'+(v.price||'')+'" class="form-control form-control-sm w-90"></td>\n<td class="w-220">\n<input type="number" step="0.01" name="variations['+idx+'][sale_price]" value="'+(v.sale_price||'')+'" class="form-control form-control-sm mb-1" placeholder="Sale Price">\n<input type="datetime-local" name="variations['+idx+'][sale_start]" value="'+(v.sale_start||'')+'" class="form-control form-control-sm mb-1">\n<input type="datetime-local" name="variations['+idx+'][sale_end]" value="'+(v.sale_end||'')+'" class="form-control form-control-sm">\n</td>\n<td class="w-160">\n<div class="d-flex flex-column gap-1">\n<input type="number" name="variations['+idx+'][stock_qty]" value="'+(v.stock_qty||0)+'" class="form-control form-control-sm" placeholder="Stock">\n<input type="number" name="variations['+idx+'][reserved_qty]" value="'+(v.reserved_qty||0)+'" class="form-control form-control-sm" placeholder="Reserved">\n<input type="hidden" name="variations['+idx+'][manage_stock]" value="0">\n<label class="small"><input type="checkbox" name="variations['+idx+'][manage_stock]" value="1" '+(v.manage_stock?'checked':'')+'> Manage</label>\n<input type="hidden" name="variations['+idx+'][backorder]" value="0">\n<label class="small"><input type="checkbox" name="variations['+idx+'][backorder]" value="1" '+(v.backorder?'checked':'')+'> Backorder</label>\n<input type="hidden" name="variations['+idx+'][image]" value="'+(v.image||'')+'">\n<div class="d-flex align-items-center gap-2 mt-1">\n<img src="'+(v.image||'/images/placeholder.svg')+'" class="var-thumb obj-cover w-60 h-60 border-ddd rounded-4">\n<div class="d-flex flex-column">\n<button type="button" class="btn btn-sm btn-outline-secondary pf-open-media" data-target-name="variations['+idx+'][image]">Media</button>\n<button type="button" class="btn btn-sm btn-outline-danger pf-clear-media mt-1">Clear</button>\n</div></div></div></td>\n<td><button type="button" class="btn btn-sm btn-outline-secondary remove-variation">X</button><input type="hidden" name="variations['+idx+'][id]" value="'+(v.id||'')+'"></td>\n</tr>'; }
    function addRow(v){ v=v||{}; var idx=(variationsTable.querySelectorAll('tr')||[]).length; variationsTable.insertAdjacentHTML('beforeend', rowTemplate(v, idx)); }
    existing.forEach(addRow); if(addBtn) addBtn.addEventListener('click', function(){ addRow({active:1}); });
    variationsTable?.addEventListener('click', function(e){ if(e.target.classList.contains('remove-variation')){ e.target.closest('tr')?.remove(); } });
    document.addEventListener('click', function(e){ var open=e.target.closest('.pf-open-media'); if(open){ var targetName=open.dataset.targetName; if(typeof openUnifiedMediaPicker!=='function'){ alert('Media picker not available'); return; } e.preventDefault(); openUnifiedMediaPicker(function(url){ var input=document.querySelector('[name="'+targetName+'"]'); if(input) input.value=url; var img=open.closest('td')?.querySelector('.var-thumb'); if(img) img.src=url; }); }
      var clear=e.target.closest('.pf-clear-media'); if(clear){ e.preventDefault(); var td=clear.closest('td'); var input=td.querySelector('input[type="hidden"][name$="[image]"]'); if(input) input.value=''; var img=td.querySelector('.var-thumb'); if(img) img.src='/images/placeholder.svg'; }
    });
    document.querySelectorAll('.used-attr-checkbox').forEach(function(chk){ chk.addEventListener('change', function(){ var checks=Array.from(document.querySelectorAll('.used-attr-checkbox:checked')).map(i=>i.value); var meta=document.getElementById('product-variation-meta'); if(meta) meta.dataset.used=JSON.stringify(checks); usedAttributes=checks.slice(); (variationsTable.querySelectorAll('tr')||[]).forEach(function(row, idx){ var current={}; (row.querySelectorAll('select[name^="variations"]')||[]).forEach(function(s){ var n=s.getAttribute('name'); var m=n.match(/variations\[(\d+)\]\[attributes\]\[(.+)\]/); if(m) current[m[2]]=s.value; }); var cell=row.children[1]; if(cell) cell.innerHTML=buildAttributeSelectors(current, idx); }); }); });
  }
  if(document.readyState==='loading') document.addEventListener('DOMContentLoaded', init); else init();
})();
