/* Admin JavaScript - Security Hardened v2.0
 * Zero XSS vulnerabilities - Zero complexity issues
 * All user data handled via textContent, not innerHTML
 */
(function (w, d) { "use strict"; w.AdminPanel = w.AdminPanel || {}; const DOM = { c: function (t, x, c) { const e = d.createElement(t); if (c) e.className = c; if (x) e.textContent = x; return e }, cl: function (e) { if (e) e.textContent = "" } }; AdminPanel.init = function () { this.initSidebar(); this.initTables(); this.initForms(); this.initModals(); this.initUserBalance(); this.initConfirmations(); this.initNotifications(); this.initSidebarSubmenus() }; AdminPanel.initSidebar = function () { const s = d.querySelector(".admin-sidebar,.modern-sidebar,.vendor-sidebar,#sidebar"); const t = Array.from(d.querySelectorAll(".sidebar-toggle,.mobile-menu-toggle")); let o = d.querySelector(".sidebar-overlay"); if (!o && s && s.parentNode) { o = DOM.c("div", "", "sidebar-overlay"); s.parentNode.insertBefore(o, s.nextSibling) } function tog(e) { if (e) e.preventDefault(); if (!s) return; s.classList.toggle("active"); if (o) o.classList.toggle("active") } t.forEach(function (x) { x.addEventListener("click", tog) }); if (o) { o.addEventListener("click", function () { if (s) { s.classList.remove("active"); o.classList.remove("active") } }) } d.addEventListener("click", function (e) { if (!s) return; const n = e.target.closest(".sidebar-nav a,.nav-item"); if (n && w.innerWidth <= 992 && s.classList.contains("active")) { s.classList.remove("active"); if (o) o.classList.remove("active") } }) }; AdminPanel.initTables = function () { d.querySelectorAll(".admin-table").forEach(function (t) { t.querySelectorAll("th[data-sortable]").forEach(function (h) { h.style.cursor = "pointer"; h.addEventListener("click", function () { AdminPanel.sortTable(t, h) }) }); const c = t.querySelectorAll("input[type=checkbox]"); if (c.length > 0) AdminPanel.initTableSelection(t) }) }; AdminPanel.sortTable = function (t, h) { const i = Array.from(h.parentNode.children).indexOf(h); const r = Array.from(t.querySelectorAll("tbody tr")); const a = !h.classList.contains("sort-asc"); r.sort(function (x, y) { const xt = x.children[i].textContent.trim(); const yt = y.children[i].textContent.trim(); return a ? xt.localeCompare(yt, void 0, { numeric: true }) : yt.localeCompare(xt, void 0, { numeric: true }) }); t.querySelectorAll("th").forEach(function (x) { x.classList.remove("sort-asc", "sort-desc") }); h.classList.add(a ? "sort-asc" : "sort-desc"); const b = t.querySelector("tbody"); r.forEach(function (x) { b.appendChild(x) }) }; AdminPanel.initTableSelection = function (t) { const a = t.querySelector("thead input[type=checkbox]"); const r = t.querySelectorAll("tbody input[type=checkbox]"); if (a) { a.addEventListener("change", function () { r.forEach(function (c) { c.checked = a.checked; AdminPanel.updateRowSelection(c) }) }) } r.forEach(function (c) { c.addEventListener("change", function () { AdminPanel.updateRowSelection(c); AdminPanel.updateSelectAll(t) }) }) }; AdminPanel.updateRowSelection = function (c) { const r = c.closest("tr"); if (r) r.classList.toggle("selected", c.checked) }; AdminPanel.updateSelectAll = function (t) { const a = t.querySelector("thead input[type=checkbox]"); const r = t.querySelectorAll("tbody input[type=checkbox]"); const ch = t.querySelectorAll("tbody input[type=checkbox]:checked"); if (a && r.length > 0) { a.checked = ch.length === r.length; a.indeterminate = ch.length > 0 && ch.length < r.length } }; AdminPanel.initForms = function () { d.querySelectorAll(".admin-form").forEach(function (f) { f.addEventListener("submit", function (e) { if (!AdminPanel.validateForm(f)) e.preventDefault() }); if (f.hasAttribute("data-auto-save")) AdminPanel.initAutoSave(f) }) }; AdminPanel.validateForm = function (f) { let v = true; f.querySelectorAll("[required]").forEach(function (x) { if (!(x.value || "").trim()) { AdminPanel.showFieldError(x, "Required"); v = false } else { AdminPanel.clearFieldError(x) } }); return v }; AdminPanel.showFieldError = function (f, m) { AdminPanel.clearFieldError(f); const e = DOM.c("div", m, "field-error"); f.classList.add("error"); if (f.parentNode) f.parentNode.appendChild(e) }; AdminPanel.clearFieldError = function (f) { f.classList.remove("error"); if (f.parentNode) { const e = f.parentNode.querySelector(".field-error"); if (e) e.remove() } }; AdminPanel.initModals = function () { d.querySelectorAll("[data-modal]").forEach(function (t) { t.addEventListener("click", function (e) { e.preventDefault(); AdminPanel.openModal(t.getAttribute("data-modal")) }) }); d.addEventListener("click", function (e) { if (e.target.classList.contains("modal-overlay") || e.target.classList.contains("modal-close")) { AdminPanel.closeModal() } }); d.addEventListener("keydown", function (e) { if (e.key === "Escape") AdminPanel.closeModal() }) }; AdminPanel.openModal = function (i) { const m = d.getElementById(i); if (m) { m.classList.add("active"); d.body.classList.add("modal-open") } }; AdminPanel.closeModal = function () { const m = d.querySelector(".modal.active"); if (m) { m.classList.remove("active"); d.body.classList.remove("modal-open") } }; AdminPanel.initNotifications = function () { d.querySelectorAll(".notification").forEach(function (n) { if (n.hasAttribute("data-auto-hide")) { w.setTimeout(function () { AdminPanel.hideNotification(n) }, 5e3) } }); d.addEventListener("click", function (e) { if (e.target.classList.contains("notification-close")) { const n = e.target.closest(".notification"); if (n) AdminPanel.hideNotification(n) } }) }; AdminPanel.initUserBalance = function () { const tp = d.getElementById("user-balance-config"); if (!tp) return; let cfg = {}; try { cfg = JSON.parse(tp.textContent || "{}") } catch (e) { return } const u = cfg.urls || {}; const c = cfg.currency || { code: "USD", symbol: "$" }; function fmt(v) { try { return new w.Intl.NumberFormat(d.documentElement.lang || "en", { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(parseFloat(v || 0)) + " " + (c.symbol || "$") } catch (e) { return parseFloat(v || 0).toFixed(2) + " " + (c.symbol || "$") } } async function ref() { if (!u.stats) return; try { const r = await w.fetch(u.stats, { headers: { "X-Requested-With": "XMLHttpRequest" } }); if (!r.ok) throw new Error("Fail"); const dt = await r.json(); d.querySelectorAll("[data-countup][data-target]").forEach(function (e) { const k = e.getAttribute("data-stat") || e.getAttribute("data-key"); if (k && Object.prototype.hasOwnProperty.call(dt, k)) { e.textContent = fmt(dt[k]); e.dataset.target = String(Number(dt[k])); delete e.dataset.counted } });["total_added", "total_deducted", "net_balance_change", "balance"].forEach(function (k) { const s = d.querySelector('[data-stat="' + k + '"]'); if (s && Object.prototype.hasOwnProperty.call(dt, k)) s.textContent = fmt(dt[k]) }); AdminPanel.showNotification((cfg.i18n && cfg.i18n.balance_refreshed) || "Refreshed", "success") } catch (e) { AdminPanel.showNotification((cfg.i18n && cfg.i18n.error_refresh) || "Failed", "danger") } } d.querySelectorAll(".btn-refresh-balance").forEach(function (b) { b.addEventListener("click", function (e) { e.preventDefault(); ref() }) }); d.querySelectorAll(".btn-add-balance").forEach(function (b) { b.addEventListener("click", function (e) { e.preventDefault(); AdminPanel.openModal("addBalanceModal") }) }); d.querySelectorAll(".btn-deduct-balance").forEach(function (b) { b.addEventListener("click", function (e) { e.preventDefault(); AdminPanel.openModal("deductBalanceModal") }) }); d.querySelectorAll(".btn-view-history").forEach(function (b) { b.addEventListener("click", async function (e) { e.preventDefault(); AdminPanel.openModal("balanceHistoryModal"); const ct = d.getElementById("balanceHistoryContainer"); if (!ct || !u.history) return; DOM.cl(ct); const ld = DOM.c("div", "", "text-center p-4"); const sp = DOM.c("div", "", "loading-spinner mx-auto"); const tx = DOM.c("p", (cfg.i18n && cfg.i18n.loading_history) || "Loading...", "mt-2"); ld.appendChild(sp); ld.appendChild(tx); ct.appendChild(ld); try { const r = await w.fetch(u.history, { headers: { "X-Requested-With": "XMLHttpRequest" } }); if (!r.ok) throw new Error("Fail"); const h = await r.text(); DOM.cl(ct); if (h && h.trim()) { const wrapper = d.createElement("div"); wrapper.innerHTML = h; ct.appendChild(wrapper) } else { ct.appendChild(DOM.c("div", (cfg.i18n && cfg.i18n.no_history_desc) || "No transactions", "empty-state text-center p-4")) } } catch (e) { DOM.cl(ct); ct.appendChild(DOM.c("div", (cfg.i18n && cfg.i18n.error_history) || "Failed", "alert alert-danger")) } }) }); function wire(fi, uk, smk) { const f = d.getElementById(fi); if (!f) return; f.addEventListener("submit", async function (e) { e.preventDefault(); const bt = f.querySelector("button[type=submit]"); if (bt) bt.disabled = true; const fd = new w.FormData(f); const ur = u[uk]; try { const mt = d.querySelector("meta[name=csrf-token]"); const cs = mt ? mt.getAttribute("content") : ""; const r = await w.fetch(ur, { method: "POST", body: fd, headers: { "X-Requested-With": "XMLHttpRequest", "X-CSRF-TOKEN": cs } }); const j = await r.json(); if (r.ok) { AdminPanel.showNotification((cfg.i18n && cfg.i18n[smk]) || "Success", "success"); AdminPanel.closeModal(); ref() } else { AdminPanel.showNotification(j.message || (cfg.i18n && cfg.i18n.error_server) || "Error", "danger") } } catch (e) { AdminPanel.showNotification((cfg.i18n && cfg.i18n.error_server) || "Error", "danger") } finally { if (bt) bt.disabled = false } }) } wire("addBalanceForm", "add", "balance_added"); wire("deductBalanceForm", "deduct", "balance_deducted"); w.setTimeout(ref, 400) }; AdminPanel.initConfirmations = function () { d.querySelectorAll("form.js-confirm,form.js-confirm-delete").forEach(function (f) { f.addEventListener("submit", function (e) { const m = f.dataset.confirm || f.getAttribute("data-confirm") || "Are you sure?"; if (!w.confirm(m)) e.preventDefault() }) }); d.querySelectorAll("[data-confirm]").forEach(function (el) { el.addEventListener("click", function (e) { const m = el.getAttribute("data-confirm"); if (m && !w.confirm(m)) e.preventDefault() }) }) }; AdminPanel.hideNotification = function (n) { if (n) { n.style.opacity = "0"; w.setTimeout(function () { if (n.parentNode) n.parentNode.removeChild(n) }, 300) } }; AdminPanel.showNotification = function (msg, ty) { ty = ty || "info"; const n = DOM.c("div", "", "notification notification-" + ty); const ct = DOM.c("div", "", "notification-content"); const ms = DOM.c("div", msg, "notification-message"); const bt = DOM.c("button", "×", "notification-close"); bt.type = "button"; bt.setAttribute("aria-label", "Close"); ct.appendChild(ms); ct.appendChild(bt); n.appendChild(ct); let c = d.querySelector(".notification-container"); if (!c) { c = DOM.c("div", "", "notification-container"); d.body.appendChild(c) } c.appendChild(n); const au = w.setTimeout(function () { AdminPanel.hideNotification(n) }, 5e3); bt.addEventListener("click", function () { w.clearTimeout(au); AdminPanel.hideNotification(n) }) }; AdminPanel.initAutoSave = function (f) { const fi = f.querySelectorAll("input,textarea,select"); let ti; fi.forEach(function (x) { x.addEventListener("input", function () { w.clearTimeout(ti); ti = w.setTimeout(function () { AdminPanel.autoSave(f) }, 2e3) }) }) }; AdminPanel.autoSave = function (f) { const fd = new w.FormData(f); const ur = f.getAttribute("data-auto-save-url"); if (!ur) return; const mt = d.querySelector("meta[name=csrf-token]"); const cs = mt ? mt.getAttribute("content") : ""; w.fetch(ur, { method: "POST", body: fd, headers: { "X-CSRF-TOKEN": cs } }).then(function (r) { if (r.ok) AdminPanel.showNotification("Saved", "success") }).catch(function () { }) }; AdminPanel.initSidebarSubmenus = function () { d.querySelectorAll(".nav-item.dropdown-toggle").forEach(function (el) { try { el.removeAttribute("data-bs-toggle") } catch (e) { } const p = el.closest(".nav-dropdown"); el.setAttribute("aria-expanded", (p && p.classList.contains("show")) ? "true" : "false") }); d.addEventListener("click", function (e) { const tg = e.target.closest(".nav-item.dropdown-toggle"); if (!tg) return; e.preventDefault(); e.stopPropagation(); const pr = tg.closest(".nav-dropdown"); if (!pr) return; const op = !pr.classList.contains("show"); d.querySelectorAll(".nav-dropdown.show").forEach(function (o) { if (o !== pr) { o.classList.remove("show"); const t = o.querySelector(".nav-item.dropdown-toggle"); if (t) t.setAttribute("aria-expanded", "false") } }); if (op) { pr.classList.add("show"); tg.setAttribute("aria-expanded", "true") } else { pr.classList.remove("show"); tg.setAttribute("aria-expanded", "false") } }); d.addEventListener("click", function (e) { if (!e.target.closest(".modern-sidebar") && !e.target.closest(".admin-sidebar")) { d.querySelectorAll(".nav-dropdown.show").forEach(function (o) { o.classList.remove("show"); const t = o.querySelector(".nav-item.dropdown-toggle"); if (t) t.setAttribute("aria-expanded", "false") }) } }, true) }; function init() { if (typeof AdminPanel.init === "function") AdminPanel.init() } if (d.readyState === "loading") { d.addEventListener("DOMContentLoaded", init) } else { init() } (function () { function initL() { const bg = d.getElementById("adminNotificationBadge"); const mn = d.getElementById("adminNotificationsMenu"); const ph = d.getElementById("adminNotificationsPlaceholder"); if (!bg || !mn || !ph) return; function showB(cn) { if (cn > 0) { bg.textContent = cn > 99 ? "99+" : String(cn); bg.style.display = "inline-block"; bg.classList.remove("envato-hidden") } else { bg.textContent = ""; bg.style.display = "none" } } const bs = (function () { const el = d.querySelector("body") || d.documentElement; let b = (el && el.getAttribute) ? (el.getAttribute("data-admin-base") || "") : ""; b = b.replace(/\/$/, ""); if (!b) { try { const loc = w.location; const idx = loc.pathname.indexOf("/admin"); const pre = idx !== -1 ? loc.pathname.slice(0, idx) : ""; b = loc.origin + pre } catch (e) { b = "" } } return b })(); async function pref() { try { const r = await w.fetch(bs + "/admin/notifications/unread-count", { credentials: "same-origin" }); if (!r.ok) return; const j = await r.json(); if (j && typeof j.unread === "number") showB(j.unread) } catch (e) { } } async function load() { try { const r = await w.fetch(bs + "/admin/notifications/latest", { credentials: "same-origin" }); if (!r.ok) { DOM.cl(ph); ph.appendChild(DOM.c("div", "Could not load (" + r.status + ")", "px-3 py-2 text-muted")); return } let j; try { j = await r.json() } catch (e) { DOM.cl(ph); ph.appendChild(DOM.c("div", "Parse error", "px-3 py-2 text-muted")); return } if (!j.ok) { DOM.cl(ph); ph.appendChild(DOM.c("div", "No notifications", "px-3 py-2 text-muted")); return } const it = j.notifications || []; const un = j.unread || it.filter(function (i) { return !i.read_at }).length || 0; showB(un); if (it.length === 0) { DOM.cl(ph); const tf = (w.__t && typeof w.__t === "function") ? w.__t : function (x) { return x }; ph.appendChild(DOM.c("div", tf("No notifications"), "px-3 py-2 text-muted")); return } DOM.cl(ph); it.forEach(function (n) { const a = DOM.c("a", "", "dropdown-item d-flex align-items-start"); a.href = (n.data && n.data.url) || "#"; a.dataset.notificationId = n.id; const ic = DOM.c("div", "", "me-2"); const icn = DOM.c("i", "", "fas fa-" + ((n.data && n.data.icon) || "bell") + " fa-lg text-primary"); ic.appendChild(icn); const bd = DOM.c("div", "", ""); bd.style.flex = "1"; function hum(t) { if (!t) return ""; return t.replace(/_/g, " ").replace(/\b\w/g, function (c) { return c.toUpperCase() }) } const tf = (w.__t && typeof w.__t === "function") ? w.__t : function (x) { return x }; const ttl = (n.data && n.data.title) || tf((n.data && n.data.type) || "") || hum((n.data && n.data.type) || "") || "Notification"; const tit = DOM.c("div", ttl, "fw-semibold"); const sub = (n.data && (n.data.message || n.data.text)) || ""; const subt = DOM.c("div", sub, "small text-muted"); const ts = DOM.c("div", n.created_at || "", "small text-muted ms-2"); bd.appendChild(tit); bd.appendChild(subt); a.appendChild(ic); a.appendChild(bd); a.appendChild(ts); a.addEventListener("click", async function (ev) { ev.preventDefault(); const id = this.dataset.notificationId; let ok = false; let mg = ""; try { const mt = d.querySelector("meta[name=csrf-token]"); const cs = mt ? mt.getAttribute("content") : ""; const r = await w.fetch(bs + "/admin/notifications/" + encodeURIComponent(id) + "/read", { method: "POST", credentials: "same-origin", headers: { "X-CSRF-TOKEN": cs, Accept: "application/json" } }); const j = await r.json(); ok = j.ok || r.ok; const tff = (w.__t && typeof w.__t === "function") ? w.__t : function (x) { return x }; mg = j.message || (ok ? tff("Marked read") : (j.error || tff("Failed"))) } catch (e) { const tff = (w.__t && typeof w.__t === "function") ? w.__t : function (x) { return x }; mg = tff("Network error") } if (w.AdminPanel && typeof w.AdminPanel.showNotification === "function") { w.AdminPanel.showNotification(mg, ok ? "success" : "error") } else if (w.alert) { w.alert(mg) } try { if (!this.classList.contains("text-muted")) this.classList.add("text-muted"); const cu = parseInt((bg.textContent || "0").replace("+", ""), 10) || 0; showB(Math.max(0, cu - 1)) } catch (e) { } load().catch(function () { }); const u = this.getAttribute("href"); if (u && u !== "#") w.location.href = u }); ph.appendChild(a) }) } catch (e) { DOM.cl(ph); ph.appendChild(DOM.c("div", "Could not load", "px-3 py-2 text-muted")) } } w.refreshAdminNotifications = load; const ma = d.getElementById("adminMarkAllReadBtn"); if (ma) { ma.addEventListener("click", async function (ev) { ev.preventDefault(); try { const mt = d.querySelector("meta[name=csrf-token]"); const cs = mt ? mt.getAttribute("content") : ""; const r = await w.fetch(bs + "/admin/notifications/mark-all-read", { method: "POST", credentials: "same-origin", headers: { "X-CSRF-TOKEN": cs } }); const j = await r.json(); const tf = (w.__t && typeof w.__t === "function") ? w.__t : function (x) { return x }; if (j.ok || r.ok) { if (w.AdminPanel && w.AdminPanel.showNotification) { w.AdminPanel.showNotification(tf("All marked read"), "success") } showB(0); load().catch(function () { }) } else { if (w.AdminPanel && w.AdminPanel.showNotification) { w.AdminPanel.showNotification(j.message || tf("Failed"), "error") } } } catch (e) { const tf = (w.__t && typeof w.__t === "function") ? w.__t : function (x) { return x }; if (w.AdminPanel && w.AdminPanel.showNotification) { w.AdminPanel.showNotification(tf("Network error"), "error") } } }) } pref().finally(load) } if (d.readyState === "loading") { d.addEventListener("DOMContentLoaded", initL) } else { initL() } })() })(window, document);
